stages:
  - test
  - build
  - deploy
variables:
  DOCKER_DRIVER: overlay2
  MAVEN_OPTS: "-Dmaven.repo.local=${CI_PROJECT_DIR}/.m2/repository"
  CLUSTER_NAME: "face-rec-cluster"
  KUBECONFIG: "/builds/${CI_PROJECT_PATH}/kubeconfig.yaml"

cache:
  key: "maven-repo-${CI_COMMIT_REF_SLUG}"
  paths:
    - .m2/repository/

before_script:
  - echo "Старт CI"
  - echo "Устанавливаем зависимости и настраиваем окружение "
  - docker-compose down || true
  - chmod +x ./scripts/notification.sh

after_script:
  - docker rmi maven:3-openjdk-17 || true

run_tests:
  stage: test
  image: maven:3-openjdk-17
  script:
    - echo "Запуск модульных тестов!"
    - mvn test -DPOSTGRES_URL=jdbc:postgresql://postgres_db:5432/test_db
    - echo "Тестирование завершено!"
  after_script:
    - ./scripts/notification.sh
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"'

build_job:
  stage: build
  image: docker:latest
  before_script:
    docker stop face_rec-1 || true
    docker rm face_rec-1 || true
    docker stop face_rec-2 || true
    docker rm face_rec-2 || true
    docker rmi face-recognition-api || true
  script:
    - echo "Разворачиваем k8s"
    - docker build -t face-recognition-api .
  after_script:
    - apk add --no-cache curl
    - sh ./scripts/notification.sh
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"'

deploy_job:
  stage: deploy
  image: docker:latest
  variables:
    KUBECONFIG: "/builds/${CI_PROJECT_PATH}/kubeconfig.yaml"
  script:
    - apk add --no-cache curl
    - curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
    - chmod +x ./kind && mv ./kind /usr/local/bin/kind
    - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    - chmod +x ./kubectl && mv ./kubectl /usr/local/bin/kubectl
    - >
      if ! kind get clusters | grep -q "face-rec-cluster"; then
        echo "Создаем кластер face-rec-cluster...."
        kind create cluster --name $CLUSTER_NAME --config k8s/cluster-config.yaml
        kind export kubeconfig --name $CLUSTER_NAME --kubeconfig $KUBECONFIG
        sed -i 's|server:.*|server: https://'$(docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${CLUSTER_NAME}-control-plane)':6443|' $KUBECONFIG
        kubectl cluster-info
        kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml
        kubectl wait --namespace ingress-nginx --for=condition=ready pod --selector=app.kubernetes.io/component=controller --timeout=300s
      else
         kind export kubeconfig --name $CLUSTER_NAME --kubeconfig $KUBECONFIG
      fi
    - kubectl cluster-info
    - kubectl apply -f k8s/namespace.yaml
    - |
      cat <<EOF | kubectl apply -f -
      apiVersion: v1
      kind: Secret
      metadata:
        name: face-rec-secrets
        namespace: face-rec-ns
      type: Opaque
      data:
        DATA_PATH: $DATA_PATH
        POSTGRES_USER: $POSTGRES_USER
        POSTGRES_PASSWORD: $POSTGRES_PASSWORD
        POSTGRES_DB: $POSTGRES_DB
        POSTGRES_PORT: $POSTGRES_PORT
        POSTGRES_URL: $POSTGRES_URL
        RESOURCES: $RESOURCES
      EOF
    - kubectl apply -f k8s/postgres-pvc.yaml
    - kubectl apply -f k8s/postgres-deployment.yaml
    - kubectl apply -f k8s/face-rec-deployment.yaml
    - kubectl apply -f k8s/ingress-face-rec.yaml
    - echo "Инфраструктура развернута"
  after_script:
    - apk add --no-cache curl
    - sh ./scripts/notification.sh
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"'
